"""
Type stubs for psutil module
"""

from typing import Any, Dict, List, Optional, Tuple, Union

def virtual_memory() -> Any: ...
def disk_usage(path: str) -> Any: ...
def cpu_count() -> Optional[int]: ...
def Process(pid: int) -> Any: ...

class _VirtualMemory:
    total: int
    available: int
    percent: float
    used: int
    free: int
    active: int
    inactive: int
    buffers: int
    cached: int
    shared: int
    slab: int

class _DiskUsage:
    total: int
    used: int
    free: int
    percent: float

class _Process:
    def __init__(self, pid: int) -> None: ...
    def pid(self) -> int: ...
    def name(self) -> str: ...
    def status(self) -> str: ...
    def create_time(self) -> float: ...
    def cpu_percent(self, interval: Optional[float] = None) -> float: ...
    def memory_percent(self) -> float: ...
    def memory_info(self) -> Any: ...
    def num_threads(self) -> int: ...
    def num_fds(self) -> int: ...
    def connections(self, kind: str = "inet") -> List[Any]: ...
    def open_files(self) -> List[Any]: ...
    def threads(self) -> List[Any]: ...
    def children(self, recursive: bool = False) -> List["_Process"]: ...
    def parent(self) -> Optional["_Process"]: ...
    def parents(self) -> List["_Process"]: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...
    def wait(self, timeout: Optional[float] = None) -> int: ...
    def as_dict(self, attrs: Optional[List[str]] = None, ad_value: Any = None) -> Dict[str, Any]: ... 